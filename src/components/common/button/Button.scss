@use "@/styles/abstracts" as *;

.button {
  @include button-base;
  position: relative;
  overflow: hidden;

  padding: var(--spacing-2) var(--spacing-4);
  font-size: var(--font-size-base);
  border-radius: var(--radius-md);
  font-weight: var(--font-weight-medium);

  &:active {
    transform: translateY(1px);
  }

  &:focus-visible {
    outline: 2px solid var(--color-border-focus);
    outline-offset: 2px;
  }

  // Disabled state
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
    &:hover {
      transform: none;
    }
  }

  // Size variants
  &--sm {
    padding: var(--spacing-1) var(--spacing-3);
    font-size: var(--font-size-sm);
    .button__icon {
      width: 16px;
      height: 16px;
    }
  }

  &--md {
    padding: var(--spacing-2) var(--spacing-4);
    font-size: var(--font-size-base);
    .button__icon {
      width: 18px;
      height: 18px;
    }
  }

  &--lg {
    padding: var(--spacing-3) var(--spacing-6);
    font-size: var(--font-size-lg);
    .button__icon {
      width: 20px;
      height: 20px;
    }
  }

  // Icon button modifier
  &--icon {
    aspect-ratio: 1;
    display: inline-flex;
    align-items: center;
    justify-content: center;

    .button__icon {
      margin: 0;
    }

    &:hover:not(:disabled) {
      .button__icon {
        transform: none;
      }
    }
  }

  // Variant styles
  &--primary {
    background-color: var(--color-primary);
    color: white;

    &:hover:not(:disabled) {
      background-color: var(--color-primary-dark);
    }

    &:active:not(:disabled) {
      background-color: var(--color-surface-active);
    }
  }

  &--secondary {
    background-color: var(--color-surface);
    color: var(--color-text-dark);
    border: 1px solid var(--color-border);

    &:hover:not(:disabled) {
      background-color: var(--color-surface-hover);
      border-color: var(--color-border-dark);
    }

    &:active:not(:disabled) {
      background-color: var(--color-surface-active);
    }
  }

  &--outline {
    background-color: transparent;
    color: var(--color-primary);
    border: 2px solid currentColor;

    &:hover:not(:disabled) {
      background-color: var(--color-surface-selected);
    }

    &:active:not(:disabled) {
      background-color: var(--color-surface-active);
    }
  }

  &--ghost {
    background-color: transparent;
    color: var(--color-text-dark);

    &:hover:not(:disabled) {
      background-color: var(--color-surface-hover);
    }

    &:active:not(:disabled) {
      background-color: var(--color-surface-active);
    }
  }

  &--danger {
    background-color: var(--color-error);
    color: white;

    &:hover:not(:disabled) {
      background-color: var(--color-error-dark);
    }

    &:active:not(:disabled) {
      background-color: var(--color-error-darker);
    }
  }

  // Full width modifier
  &--full-width {
    width: 100%;
  }

  // Loading state
  &--loading {
    cursor: wait;

    .button__text {
      opacity: 0;
    }

    .button__spinner {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 20px;
      height: 20px;
      border: 2px solid transparent;
      border-top-color: currentColor;
      border-right-color: currentColor;
      border-radius: 50%;
      animation: spin 0.6s linear infinite;
    }
  }

  // Icon handling
  &__icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: transform var(--transition-transform);

    &--left {
      margin-right: var(--spacing-2);
    }

    &--right {
      margin-left: var(--spacing-2);
    }
  }

  // Interactive feedback
  &:hover:not(:disabled) {
    .button__icon--right {
      transform: translateX(2px);
    }

    .button__icon--left {
      transform: translateX(-2px);
    }
  }
}

// Loading spinner animation
@keyframes spin {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  }
  to {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}

// Ripple effect for touch feedback
.button:not(:disabled):active::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  background-color: currentColor;
  border-radius: 50%;
  opacity: 0.2;
  transform: translate(-50%, -50%) scale(0);
  animation: ripple 0.6s ease-out;
}

@keyframes ripple {
  from {
    transform: translate(-50%, -50%) scale(0);
    opacity: 0.2;
  }
  to {
    transform: translate(-50%, -50%) scale(2);
    opacity: 0;
  }
}
