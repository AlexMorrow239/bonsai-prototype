@use "sass:color";
@use "./variables";

@function color-mix($color1, $color2, $weight: 0.5) {
  $result: color.mix($color1, $color2, $weight * 100%);
  @return $result;
}

/* Emotion-based color overlay */
@mixin emotion-overlay($base-color, $emotion: "neutral") {
  @if $emotion == "happy" {
    background: linear-gradient(to right, var(--color-primary-light), var(--color-primary));
  } @else if $emotion == "calm" {
    background: linear-gradient(to right, var(--color-primary-dark), var(--color-primary));
  } @else {
    background: $base-color;
  }
}

/* Glassmorphism Effect */
@mixin glass-effect($style: "default") {
  @if $style == "heavy" {
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(20px) saturate(180%);
    -webkit-backdrop-filter: blur(20px) saturate(180%);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  } @else if $style == "light" {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(8px) saturate(120%);
    -webkit-backdrop-filter: blur(8px) saturate(120%);
    border: 1px solid rgba(255, 255, 255, 0.125);
  } @else {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(12px) saturate(150%);
    -webkit-backdrop-filter: blur(12px) saturate(150%);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 16px 0 rgba(31, 38, 135, 0.15);
  }
}

// Color gradient text
@mixin gradient-text($start-color, $end-color) {
  background: linear-gradient(135deg, $start-color, $end-color);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
}

// Gradient Background Mixins
@mixin gradient-bg($style: "default") {
  @if $style == "blue" {
    background: linear-gradient(135deg, #63b3ed 0%, #3182ce 100%);
  } @else if $style == "purple" {
    background: linear-gradient(135deg, #b794f4 0%, #805ad5 100%);
  } @else {
    background: linear-gradient(
      135deg,
      var(--color-primary-light) 0%,
      var(--color-primary-dark) 100%
    );
  }
}

@mixin frosted-card {
  @include glass-effect("light");
  border-radius: var(--radius-lg);
  padding: var(--spacing-6);
}

@mixin frosted-nav {
  @include glass-effect("heavy");
  position: sticky;
  top: 0;
  z-index: var(--z-navbar);
  padding: var(--spacing-4);
}

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--spacing-2) var(--spacing-4);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-tight);
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  border-radius: var(--radius-md);
  border: 1px solid transparent;
  cursor: pointer;
  transition: var(--transition-all);

  background-color: var(--color-primary);
  color: white;

  // Hover state
  &:hover {
    background-color: var(--color-primary-dark);
  }

  // Focus state
  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px var(--color-border-focus);
  }

  // Active state
  &:active {
    transform: translateY(1px);
  }

  // Disabled state
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  // Icon support
  .icon {
    margin-right: var(--spacing-2);
  }

  // Size variations
  &.small {
    font-size: var(--font-size-sm);
    padding: var(--spacing-1) var(--spacing-3);
  }

  &.large {
    font-size: var(--font-size-lg);
    padding: var(--spacing-3) var(--spacing-6);
  }

  // Full width variation
  &.full-width {
    width: 100%;
  }
}

@mixin button-emotion($emotion: "neutral") {
  @include button-base;

  @if $emotion == "positive" {
    background-color: var(--color-success);
    color: white;
    &:hover {
      background-color: var(--color-success-dark);
    }
  } @else if $emotion == "negative" {
    background-color: var(--color-error);
    color: white;
    &:hover {
      background-color: var(--color-error-dark);
    }
  } @else {
    background-color: var(--color-primary);
    color: white;
    &:hover {
      background-color: var(--color-primary-dark);
    }
  }
}

@mixin card-base {
  background-color: var(--color-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  padding: var(--spacing-6);
  transition: var(--transition-all);
  border: 1px solid var(--color-border-light);

  // Hover state
  &:hover {
    box-shadow: var(--shadow-lg);
    transform: translateY(-2px);
  }

  // Focus state for accessibility
  &:focus-within {
    outline: none;
    box-shadow: 0 0 0 3px var(--color-border-focus);
  }

  // Content spacing
  > * + * {
    margin-top: var(--spacing-4);
  }

  // Heading styles within card
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-2);
  }

  // Paragraph styles within card
  p {
    color: var(--color-text);
    font-size: var(--font-size-base);
    line-height: var(--line-height-relaxed);
  }

  // Link styles within card
  a {
    color: var(--color-primary);
    text-decoration: none;
    transition: var(--transition-colors);

    &:hover {
      color: var(--color-primary-dark);
      text-decoration: underline;
    }
  }

  // Responsive adjustments
  @include respond-to("md") {
    padding: var(--spacing-8);
  }
}

// Card styles with emotional context
@mixin card-emotion($emotion: "neutral") {
  @include card-base;
  & {
    @if $emotion == "positive" {
      border-left: 4px solid var(--color-success);
    } @else if $emotion == "negative" {
      border-left: 4px solid var(--color-error);
    } @else {
      border-left: 4px solid var(--color-primary);
    }
  }
}

// Base mixins (enhanced)
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin grid($columns: 1, $gap: "md") {
  display: grid;
  grid-template-columns: repeat($columns, minmax(0, 1fr));
  gap: var(--spacing-#{$gap});
}

// Enhanced responsive design mixins
@mixin respond-to($breakpoint) {
  @if $breakpoint == "sm" {
    @media (min-width: 640px) {
      @content;
    }
  } @else if $breakpoint == "md" {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $breakpoint == "lg" {
    @media (min-width: 1024px) {
      @content;
    }
  } @else if $breakpoint == "xl" {
    @media (min-width: 1280px) {
      @content;
    }
  } @else if $breakpoint == "2xl" {
    @media (min-width: 1536px) {
      @content;
    }
  }
}

// Enhanced accessibility mixins
@mixin focus-ring {
  outline: none;
  ring: 2px;
  ring-offset: 2px;
  ring-color: var(--color-primary);
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Animation mixins
@mixin fade-in($duration: 0.3s) {
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  & {
    animation: fadeIn $duration ease-in;
  }
}

@mixin hover-lift {
  & {
    transition: var(--transition-transform);
  }
  &:hover {
    transform: translateY(-4px);
  }
}

// Container mixins
@mixin container($padding: true) {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  max-width: var(--container-width);

  @if $padding {
    padding-left: var(--spacing-4);
    padding-right: var(--spacing-4);

    @include respond-to("md") {
      padding-left: var(--spacing-6);
      padding-right: var(--spacing-6);
    }
  }
}

// Enhanced input styles
@mixin input-base {
  height: var(--input-height);
  padding: var(--spacing-2) var(--spacing-3);
  border: var(--input-border);
  border-radius: var(--input-radius);
  background-color: var(--color-background-input);
  font-size: var(--font-size-base);
  transition: var(--transition-all);
  width: 100%;

  &:focus {
    border-color: var(--color-primary);
    outline: none;
    box-shadow: var(--input-focus-ring);
  }

  &:disabled {
    background-color: var(--color-background-alt);
    cursor: not-allowed;
  }
}

// Flexbox mixin with direction, justify, and align parameters
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
  }
}

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-2);
  border: none;
  border-radius: var(--radius-base);
  cursor: pointer;
  font-family: var(--font-primary);
  font-weight: var(--font-weight-medium);
  text-decoration: none;
  transition: all var(--transition-base);
  white-space: nowrap;
  line-height: 1;

  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@mixin button-reset {
  margin: 0;
  padding: 0;
  border: none;
  background: none;
  font: inherit;
  color: inherit;
  line-height: normal;
  cursor: pointer;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;

  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

@mixin button-variant($bg-color, $text-color) {
  background-color: var(#{$bg-color});
  color: var(#{$text-color});

  &:hover {
    filter: brightness(0.9);
  }

  &:active {
    filter: brightness(0.8);
  }

  &:disabled {
    background-color: var(--color-gray-200);
    color: var(--color-gray-500);
    filter: none;
  }
}
